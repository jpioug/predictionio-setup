#!/bin/bash

cd `dirname $0`
cd ..

BASE_DIR=`pwd`
SCRIPTNAME=pio-setup

PIO_HOME=$BASE_DIR/predictionio
SPARK_HOME=$BASE_DIR/spark
ES_HOME=$BASE_DIR/elasticsearch
TARGET_DIR=$BASE_DIR/target

DEFAULT_SCALA_VERSION=2.11.8
DEFAULT_SPARK_VERSION=2.1.1
DEFAULT_HADOOP_VERSION=2.6.5
DEFAULT_ELASTICSEARCH_VERSION=5.5.2
DEFAULT_PIO_GIT_USER=jpioug
DEFAULT_PIO_GIT_BRANCH=pyspark

PIO_PID_FILE=$PIO_HOME/pid.txt
ES_PID_FILE=$ES_HOME/pid.txt
LOG_FILE=$TARGET_DIR/pio-setup.log

setup_all() {
  if [ x"$SCALA_VERSION" = x ] ; then
    SCALA_VERSION=$DEFAULT_SCALA_VERSION
  fi
  if [ x"$SPARK_VERSION" = x ] ; then
    SPARK_VERSION=$DEFAULT_SPARK_VERSION
  fi
  if [ x"$HADOOP_VERSION" = x ] ; then
    HADOOP_VERSION=$DEFAULT_HADOOP_VERSION
  fi
  if [ x"$ELASTICSEARCH_VERSION" = x ] ; then
    ELASTICSEARCH_VERSION=$DEFAULT_ELASTICSEARCH_VERSION
  fi
  if [ x"$SPARK_FILE" = x ] ; then
    SPARK_FILE=spark-${SPARK_VERSION}-bin-hadoop2.6.tgz
  fi
  if [ x"$ES_FILE" = x ] ; then
    ES_FILE=elasticsearch-${ELASTICSEARCH_VERSION}.tar.gz
  fi
  if [ x"$PIO_GIT_USER" = x ] ; then
    PIO_GIT_USER=$DEFAULT_PIO_GIT_USER
  fi
  if [ x"$PIO_GIT_REPO" = x ] ; then
    PIO_GIT_REPO=incubator-predictionio
  fi
  if [ x"$PIO_GIT_BRANCH" = x ] ; then
    PIO_GIT_BRANCH=$DEFAULT_PIO_GIT_BRANCH
  fi

  mkdir -p $TARGET_DIR
  setup_pio
  setup_spark
  setup_es
}

clean_all() {
  echo "#"
  echo "# Clean up"
  echo "#"
  rm -rf $PIO_HOME
  rm -rf $ES_HOME
  rm -rf $SPARK_HOME
  rm -rf $TARGET_DIR
}

setup_pio() {
  rm -rf $PIO_HOME
  cd $TARGET_DIR

  if [ ! -d $PIO_GIT_REPO ] ; then
    echo "#"
    echo "# Clone PredictionIO"
    echo "#"
    git clone https://github.com/$PIO_GIT_USER/$PIO_GIT_REPO.git
    cd $PIO_GIT_REPO
    if [ x"$PIO_GIT_BRANCH" != "xdevelop" ] ; then
      git checkout -b $PIO_GIT_BRANCH origin/$PIO_GIT_BRANCH
    fi
  else
    cd $PIO_GIT_REPO
  fi

  echo "#"
  echo "# Build PredictionIO"
  echo "#"
  bash ./make-distribution.sh \
    -Dscala.version=$SCALA_VERSION \
    -Dspark.version=$SPARK_VERSION \
    -Dhadoop.version=$HADOOP_VERSION \
    -Delasticsearch.version=$ELASTICSEARCH_VERSION
  if [ $? != 0 ] ; then
    echo "Build Failed!"
    exit 1
  fi

  echo "#"
  echo "# Deploy PredictionIO"
  echo "#"
  PIO_NAME=`ls PredictionIO-*.tar.gz | sed -e "s/\(.*\).tar.gz/\1/"`
  if [ ! -e "${PIO_NAME}.tar.gz" ] ; then
    echo "$BASE_DIR/${PIO_NAME}.tar.gz does not exist."
    exit 1
  fi
  tar zxvf ${PIO_NAME}.tar.gz
  mv $PIO_NAME $PIO_HOME

  ES_NAME=ELASTICSEARCH
  PIO_ENV_FILE=$PIO_HOME/conf/pio-env.sh
  replace_line "s/^SPARK_HOME/# SPARK_HOME/" $PIO_ENV_FILE
  replace_line "s/^POSTGRES_JDBC_DRIVER/# POSTGRES_JDBC_DRIVER/" $PIO_ENV_FILE
  replace_line "s/^MYSQL_JDBC_DRIVER/# MYSQL_JDBC_DRIVER/" $PIO_ENV_FILE
  replace_line "s/PIO_STORAGE_REPOSITORIES_METADATA_SOURCE=PGSQL/PIO_STORAGE_REPOSITORIES_METADATA_SOURCE=${ES_NAME}/" $PIO_ENV_FILE
  replace_line "s/PIO_STORAGE_REPOSITORIES_EVENTDATA_SOURCE=PGSQL/PIO_STORAGE_REPOSITORIES_EVENTDATA_SOURCE=${ES_NAME}/" $PIO_ENV_FILE
  replace_line "s/PIO_STORAGE_REPOSITORIES_MODELDATA_SOURCE=PGSQL/PIO_STORAGE_REPOSITORIES_MODELDATA_SOURCE=LOCALFS/" $PIO_ENV_FILE
  replace_line "s/^PIO_STORAGE_SOURCES_PGSQL_/# PIO_STORAGE_SOURCES_PGSQL_/g" $PIO_ENV_FILE
  replace_line "s/# PIO_STORAGE_SOURCES_LOCALFS/PIO_STORAGE_SOURCES_LOCALFS/" $PIO_ENV_FILE
  echo 'PIO_STORAGE_SOURCES_ELASTICSEARCH_TYPE=elasticsearch' >> $PIO_ENV_FILE
  echo 'PIO_STORAGE_SOURCES_ELASTICSEARCH_HOSTS=localhost' >> $PIO_ENV_FILE
  echo 'PIO_STORAGE_SOURCES_ELASTICSEARCH_PORTS=9200' >> $PIO_ENV_FILE
  echo 'PIO_STORAGE_SOURCES_ELASTICSEARCH_SCHEMES=http' >> $PIO_ENV_FILE
  echo 'PIO_STORAGE_SOURCES_ELASTICSEARCH_HOME='$ES_HOME >> $PIO_ENV_FILE
  echo 'SPARK_HOME='$SPARK_HOME >> $PIO_ENV_FILE

  echo 'PIO_STORAGE_SOURCES_ELASTICSEARCH_PIO_META_NUM_OF_SHARDS=1' >> $PIO_ENV_FILE
  echo 'PIO_STORAGE_SOURCES_ELASTICSEARCH_PIO_META_NUM_OF_REPLICAS=0' >> $PIO_ENV_FILE
  echo 'PIO_STORAGE_SOURCES_ELASTICSEARCH_PIO_EVENT_NUM_OF_SHARDS=5' >> $PIO_ENV_FILE
  echo 'PIO_STORAGE_SOURCES_ELASTICSEARCH_PIO_EVENT_NUM_OF_REPLICAS=0' >> $PIO_ENV_FILE
  echo 'PIO_STORAGE_SOURCES_ELASTICSEARCH_EVENTDATA_REFRESH=false' >> $PIO_ENV_FILE

}

replace_line() {
  REPLACEMENT=$1
  FILE=$2
  if [ `uname` = "Linux" ] ; then
    sed -i "$REPLACEMENT" "$FILE"
  else
    sed -i '' "$REPLACEMENT" "$FILE"
  fi
}

setup_spark() {
  rm -rf $SPARK_HOME
  cd $TARGET_DIR

  if [ ! -f $SPARK_FILE ] ; then
    echo "#"
    echo "# Download Spark"
    echo "#"
    curl -o $SPARK_FILE http://d3kbcqa49mib13.cloudfront.net/$SPARK_FILE
  fi

  echo "#"
  echo "# Deploy Spark"
  echo "#"
  rm -rf vendor
  mkdir vendor
  tar zxvfC $SPARK_FILE vendor > /dev/null
  rm -rf $SPARK_HOME
  mv vendor/* $SPARK_HOME
  echo "spark.locality.wait.node           0s" >> $SPARK_HOME/conf/spark-defaults.conf
}

setup_es() {
  rm -rf $ES_HOME
  cd $TARGET_DIR

  if [ ! -f $ES_FILE ] ; then
    echo "#"
    echo "# Download Elasticsearch"
    echo "#"
    curl -o $ES_FILE https://artifacts.elastic.co/downloads/elasticsearch/$ES_FILE
  fi

  echo "#"
  echo "# Deploy Elasticsearch"
  echo "#"
  rm -rf vendor
  mkdir vendor
  tar zxvfC $ES_FILE vendor > /dev/null
  mv vendor/* $ES_HOME

  ES_CONF_FILE=$ES_HOME/config/elasticsearch.yml
  echo 'http.cors.enabled: true' >> $ES_CONF_FILE
  echo 'http.cors.allow-origin: "*"' >> $ES_CONF_FILE
  echo 'network.host: "0"' >> $ES_CONF_FILE
}

start_pio() {
  export PIO_HOME
  export ES_HOME
  if [ -f $ES_PID_FILE ] ; then
    kill `cat $ES_PID_FILE`
  fi
  if [ -f $PIO_PID_FILE ] ; then
    kill `cat $PIO_PID_FILE`
  fi
  mkdir -p $TARGET_DIR

  echo "#"
  echo "# Start PredictionIO"
  echo "#"
  nohup $ES_HOME/bin/elasticsearch >> $LOG_FILE 2>&1 &
  echo $! > $ES_PID_FILE
  $PIO_HOME/bin/pio eventserver >> $LOG_FILE 2>&1 &
  echo $! > $PIO_PID_FILE
}

stop_pio() {
  export PIO_HOME
  export ES_HOME
  echo "#"
  echo "# Stop PredictionIO"
  echo "#"
  if [ -f $PIO_PID_FILE ] ; then
    kill `cat $PIO_PID_FILE`
    rm $PIO_PID_FILE
  fi
  if [ -f $ES_PID_FILE ] ; then
    kill `cat $ES_PID_FILE`
    rm $ES_PID_FILE
  fi
}

status_pio() {
  export PIO_HOME
  export ES_HOME
  echo "#"
  echo "# PredictionIO Status"
  echo "#"
  $PIO_HOME/bin/pio status
}

case "$1" in
  start)
    start_pio
    ;;
  stop)
    stop_pio
    ;;
  status)
    status_pio
    ;;
  deploy)
    setup_all
    ;;
  clean)
    stop_pio
    clean_all
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|deploy|clean}" >&2
    exit 3
    ;;
esac
